import random

def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - -")

        for j in range(len(board[0])):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")

            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")

def is_valid(board, num, pos):
    # Check row
    for i in range(len(board[0])):
        if board[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(board)):
        if board[i][pos[1]] == num and pos[0] != i:
            return False

    # Check 3x3 grid
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False

    return True

def find_empty_location(board):
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == 0:
                return (i, j)  # row, col
    return None

def solve_sudoku(board):
    empty = find_empty_location(board)
    if not empty:
        return True  # Puzzle solved

    row, col = empty

    for num in range(1, 10):
        if is_valid(board, num, (row, col)):
            board[row][col] = num

            if solve_sudoku(board):
                return True

            board[row][col] = 0  # Backtrack

    return False

def generate_sudoku():
    # Generate a solved Sudoku puzzle
    board = [[0 for _ in range(9)] for _ in range(9)]
    solve_sudoku(board)

    # Remove some numbers to create the puzzle
    holes = random.randint(30, 40)  # Adjust the number of holes as needed
    for _ in range(holes):
        row = random.randint(0, 8)
        col = random.randint(0, 8)
        board[row][col] = 0

    return board

def play_sudoku():
    print("Welcome to Sudoku!")

    # Generate a Sudoku puzzle
    puzzle = generate_sudoku()

    # Print the initial puzzle
    print("Here's your Sudoku puzzle:")
    print_board(puzzle)

    # Allow the player to solve the puzzle
    print("Enter row, column, and number (1-9) to fill a cell (e.g., '3 5 7'). Enter '0 0 0' to quit.")
    while True:
        try:
            row, col, num = map(int, input("Enter your move: ").split())
            if row == col == num == 0:
                print("Exiting...")
                break
            if puzzle[row - 1][col - 1] != 0:
                print("This cell is already filled. Try again.")
                continue
            if not is_valid(puzzle, num, (row - 1, col - 1)):
                print("Invalid move. Try again.")
                continue
            puzzle[row - 1][col - 1] = num
            print_board(puzzle)
            if all(all(cell != 0 for cell in row) for row in puzzle):
                print("Congratulations! You solved the puzzle!")
                break
        except ValueError:
            print("Invalid input. Please enter three integers separated by spaces.")

play_sudoku()
