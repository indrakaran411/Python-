class GridLock:
    def __init__(self, size):
        self.size = size
        self.grid = [[' ' for _ in range(size)] for _ in range(size)]
        self.grid[size - 1][size // 2] = 'R'  # Place the red block at the bottom middle
        self.exit_pos = (size - 1, size // 2)

    def print_grid(self):
        for row in self.grid:
            print('|' + '|'.join(row) + '|')
            print('|' + '|'.join(['_' for _ in row]) + '|')

    def move_red_block(self, direction):
        delta_x, delta_y = 0, 0
        if direction == 'up':
            delta_x = -1
        elif direction == 'down':
            delta_x = 1
        elif direction == 'left':
            delta_y = -1
        elif direction == 'right':
            delta_y = 1

        new_x, new_y = self.exit_pos[0] + delta_x, self.exit_pos[1] + delta_y

        if 0 <= new_x < self.size and 0 <= new_y < self.size:
            if self.grid[new_x][new_y] == ' ':
                self.grid[self.exit_pos[0]][self.exit_pos[1]] = ' '
                self.exit_pos = (new_x, new_y)
                self.grid[self.exit_pos[0]][self.exit_pos[1]] = 'R'
            else:
                print("Cannot move there. Blocked by another block.")
        else:
            print("Cannot move there. Out of bounds.")

    def check_win(self):
        return self.exit_pos == (0, self.size // 2)


def play_game():
    size = int(input("Enter the size of the grid (odd number recommended): "))
    game = GridLock(size)
    print("Welcome to Grid Lock!")
    print("Move the red block 'R' to the top row to win.")
    while True:
        game.print_grid()
        if game.check_win():
            print("Congratulations! You've won!")
            break
        direction = input("Enter direction to move the red block (up/down/left/right): ").lower()
        game.move_red_block(direction)


if __name__ == "__main__":
    play_game()
